putStrLn "\n/////////////Test de inputToState/////////////\n"
inputToState ([PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]])
-- State [PCGF28 (PCC [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]]),PCGF28 (PCC [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]]),PCGF28 (PCC [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]]),PCGF28 (PCC [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]])]

putStrLn "\n/////////////Test de stateToOutput/////////////\n"
stateToOutput (State [PCGF28 (PCC [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]]),PCGF28 (PCC [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]]),PCGF28 (PCC [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]]),PCGF28 (PCC [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]])])
-- [PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1],PCC [Z2Z 1]]

putStrLn "\n\n===Test de subByte et invSubByte==="

putStrLn "\n/////////////Test de subByteAffineTrans/////////////\n"

-- {inverse de 00} => {63} (00 déjà inversé dans GF2^8)
subByteAffineTrans 0 (PCC [Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 0])
-- PCC [Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 0]

-- {inverse de 53} => {ed} (53 déjà inversé dans GF2^8)
subByteAffineTrans 0 (PCC [Z2Z 0, Z2Z 1, Z2Z 0, Z2Z 1, Z2Z 0, Z2Z 0, Z2Z 1, Z2Z 1])
-- PCC [Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 1]

-- {inverse de C6} => {b4} (C6 déjà inversé dans GF2^8)
subByteAffineTrans 0 (PCC [Z2Z 0, Z2Z 0, Z2Z 1, Z2Z 0, Z2Z 0, Z2Z 1, Z2Z 1, Z2Z 1])
-- PCC [Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 1]

putStrLn "\n/////////////Test de SubByte/////////////\n"

-- {53} => {ed}
subByte (PCC [Z2Z 1, Z2Z 1, Z2Z 0, Z2Z 0, Z2Z 1, Z2Z 0, Z2Z 1, Z2Z 0])
-- PCC [Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 1]

-- {c6} => {b4}
subByte (PCC [Z2Z 0, Z2Z 1, Z2Z 1, Z2Z 0, Z2Z 0, Z2Z 0, Z2Z 1, Z2Z 1])
-- PCC [Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 1]

-- {cb} => {1f}
subByte (PCC [Z2Z 1, Z2Z 1, Z2Z 0, Z2Z 1, Z2Z 0, Z2Z 0, Z2Z 1, Z2Z 1])
-- PCC [Z2Z 1,Z2Z 1,Z2Z 1,Z2Z 1,Z2Z 1]

putStrLn "\n/////////////Test de invSubByte/////////////\n"

-- {ed} => {53}
invSubByte (PCC [Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 1])
-- PCC [Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 0,Z2Z 1]

-- {b4} => {c6}
invSubByte (PCC [Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 1])
-- PCC [Z2Z 0,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 1]

-- {1f} => {cb}
invSubByte (PCC [Z2Z 1,Z2Z 1,Z2Z 1,Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 0,Z2Z 0])
-- PCC [Z2Z 1,Z2Z 1,Z2Z 0,Z2Z 1,Z2Z 0,Z2Z 0,Z2Z 1,Z2Z 1]

putStrLn "\n/////////////Test de SubBytes/////////////\n"

stateToHexa $ subBytes (hexaToState ["193de3be", "a0f4e22b", "9ac68d2a", "e9f84808"])
-- ["d42711ae","e0bf98f1","b8b45de5","1e415230"]

putStrLn "\n\n===Test de shiftRows et invShiftRows==="

putStrLn "\n/////////////Test de shiftRows/////////////\n"

stateToHexa $ shiftRows (hexaToState ["00000000", "01010101", "02020202", "03030303"])
-- ["00010203","01020300","02030001","03000102"]
stateToHexa $ shiftRows (hexaToState ["22222222", "11111111", "11111111", "11111111"])
-- ["22111111","11111122","11112211","11221111"]

putStrLn "\n/////////////Test de invShiftRows/////////////\n"

--  [[{00}, {01}, {02}, {03}], -> [[{00}, {01}, {02}, {03}],(Exemple pour invShiftRows)
--  [{00}, {01}, {02}, {03}],     [{03}, {00}, {01}, {02}],
--  [{00}, {01}, {02}, {03}],     [{02}, {03}, {00}, {01}],
--  [{00}, {01}, {02}, {03}]]     [{01}, {02}, {03}, {00}]]
stateToHexa $ invShiftRows (hexaToState ["00000000", "01010101", "02020202", "03030303"])
-- ["00030201","01000302","02010003","03020100"]
stateToHexa $ invShiftRows (hexaToState ["22222222", "11111111", "11111111", "11111111"])
-- ["22111111","11221111","11112211","11111122"]

putStrLn "\n\n===Test de mixColumns et invMixColumns ==="
-- Exemple 1 Appendix B du FIPS

putStrLn "\n/////////////Test de mixColumns/////////////\n"

stateToHexa $ mixColumns (hexaToState ["d4bf5d30", "e0b452ae", "b84111f1", "1e2798e5"])
-- ["046681e5","e0cb199a","48f8d37a","2806264c"]

stateToHexa $ mixColumns (hexaToState ["49db873b", "45395389", "7f02d2f1", "77de961a"])
-- ["584dcaf1","1b4b5aac","dbe7caa8","1b6bb0e5"]

putStrLn "\n/////////////Test de invMixColumns/////////////\n"

stateToHexa $ invMixColumns (hexaToState ["046681e5","e0cb199a","48f8d37a","2806264c"])
-- ["d4bf5d30","e0b452ae","b84111f1","1e2798e5"]

stateToHexa $ invMixColumns (hexaToState ["584dcaf1","1b4b5aac","dbe7caa8","1b6bb0e5"])
-- ["49db873b","45395389","7f02d2f1","77de961a"]

putStrLn "\n/////////////Test de addRoundKey/////////////\n"

stateToHexa $ addRoundKey (map hexaToPolyCoefGF28 ["3243f6a8", "885a308d", "313198a2", "e0370734"]) (hexaToState ["2b7e1516", "28aed2a6", "abf71588", "09cf4f3c"])
-- ["193de3be","a0f4e22b","9ac68d2a","e9f84808"]

putStrLn "\n\n===Test de keyExpansion==="

putStrLn "\n/////////////Test de rotWord/////////////\n"

polyCoefGF28ToHexa $ rotWord $ hexaToPolyCoefGF28 "09cf4f3c"
-- "cf4f3c09"

putStrLn "\n/////////////Test de subWord/////////////\n"

polyCoefGF28ToHexa $ subWord $ hexaToPolyCoefGF28 "cf4f3c09"
-- "8a84eb01"

putStrLn "\n/////////////Test de keyExpansion/////////////\n"
-- exemple de l'Appendix A.1 du FIPS

map polyCoefGF28ToHexa $ keyExpansion 4 4 10 (hexaToKey "2b7e151628aed2a6abf7158809cf4f3c")
-- ["2b7e1516","28aed2a6","abf71588","09cf4f3c","a0fafe17","88542cb1","23a33939","2a6c7605","f2c295f2","7a96b943","5935807a","7359f67f","3d80477d","4716fe3e","1e237e44","6d7a883b","ef44a541","a8525b7f","b671253b","db0bad00","d4d1c6f8","7c839d87","caf2b8bc","11f915bc","6d88a37a","110b3efd","dbf98641","ca0093fd","4e54f70e","5f5fc9f3","84a64fb2","4ea6dc4f","ead27321","b58dbad2","312bf560","7f8d292f","ac7766f3","19fadc21","28d12941","575c006e","d014f9a8","c9ee2589","e13f0cc8","b6630ca6"]

map polyCoefGF28ToHexa $ keyExpansion 6 4 12 (hexaToKey "8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b")
-- ["8e73b0f7","da0e6452","c810f32b","809079e5","62f8ead2","522c6b7b","fe0c91f7","2402f5a5","ec12068e","6c827f6b","0e7a95b9","5c56fec2","4db7b4bd","69b54118","85a74796","e92538fd","e75fad44","bb095386","485af057","21efb14f","a448f6d9","4d6dce24","aa326360","113b30e6","a25e7ed5","83b1cf9a","27f93943","6a94f767","c0a69407","d19da4e1","ec1786eb","6fa64971","485f7032","22cb8755","e26d1352","33f0b7b3","40beeb28","2f18a259","6747d26b","458c553e","a7e1466c","9411f1df","821f750a","ad07d753","ca400538","8fcc5006","282d166a","bc3ce7b5","e98ba06f","448c773c","8ecc7204","01002202"]

putStrLn "\n/////////////Test de cipherAES128/////////////\n"

-- exemple de l'Appendix B du FIPS
outputToHexa $ aes128Cipher (hexaToKey "2b7e151628aed2a6abf7158809cf4f3c") (hexaToInput "3243f6a8885a308d313198a2e0370734")
-- "3925841d02dc09fbdc118597196a0b32"

-- exemple de l'Appendix C.1 du FIPS
outputToHexa $ aes128Cipher (hexaToKey "000102030405060708090a0b0c0d0e0f") (hexaToInput "00112233445566778899aabbccddeeff")
-- "69c4e0d86a7b0430d8cdb78070b4c55a"

outputToHexa $ aes128Cipher (hexaToKey "8b7e150a0b01628aed2b23f809c0d0e6") (hexaToInput "827e766bc626a013d88d8723ba9f1b3f")
-- "c62b7a5131a676bcd6133f92f39ff3f5"

putStrLn "\n/////////////Test de invCipherAES128/////////////\n"

-- exemple de l'Appendix B du FIPS
outputToHexa $ aes128InvCipher (hexaToKey "2b7e151628aed2a6abf7158809cf4f3c") (hexaToInput "3925841d02dc09fbdc118597196a0b32")
-- "3243f6a8885a308d313198a2e0370734"

-- exemple de l'Appendix C.1 du FIPS
outputToHexa $ aes128InvCipher (hexaToKey "000102030405060708090a0b0c0d0e0f") (hexaToInput "69c4e0d86a7b0430d8cdb78070b4c55a")
-- "00112233445566778899aabbccddeeff"

outputToHexa $ aes128InvCipher (hexaToKey "8b7e150a0b01628aed2b23f809c0d0e6") (hexaToInput "c62b7a5131a676bcd6133f92f39ff3f5")
-- "827e766bc626a013d88d8723ba9f1b3f"

putStrLn "\n/////////////Test de cipherAES192/////////////\n"

-- exemple de l'Appendix C.2 du FIPS
outputToHexa $ aes192Cipher (hexaToKey "000102030405060708090a0b0c0d0e0f1011121314151617") (hexaToInput "00112233445566778899aabbccddeeff")
-- "dda97ca4864cdfe06eaf70a0ec0d7191"

putStrLn "\n/////////////Test de invCipherAES192/////////////\n"

-- exemple de l'Appendix C.2 du FIPS
outputToHexa $ aes192InvCipher (hexaToKey "000102030405060708090a0b0c0d0e0f1011121314151617") (hexaToInput "dda97ca4864cdfe06eaf70a0ec0d7191")
-- "00112233445566778899aabbccddeeff"

putStrLn "\n/////////////Test de cipherAES256/////////////\n"

-- exemple de l'Appendix C.3 du FIPS
outputToHexa $ aes256Cipher (hexaToKey "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f") (hexaToInput "00112233445566778899aabbccddeeff")
-- "8ea2b7ca516745bfeafc49904b496089"

putStrLn "\n/////////////Test de invCipherAES256/////////////\n"

-- exemple de l'Appendix C.3 du FIPS
outputToHexa $ aes256InvCipher (hexaToKey "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f") (hexaToInput "8ea2b7ca516745bfeafc49904b496089")
-- "00112233445566778899aabbccddeeff"